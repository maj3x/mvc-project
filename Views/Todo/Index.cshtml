@model IEnumerable<AssignmentModel>
@inject UserManager<AppUser> UserManager
@{
    ViewData["Title"] = "Ödevlerim";
    Layout = "_LayoutAdmin";
    var currentUser = await UserManager.GetUserAsync(User);
    var isTeacher = await UserManager.IsInRoleAsync(currentUser, "Teacher");
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Ödev Takip</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home">Ana Sayfa</a></li>
        <li class="breadcrumb-item active">Ödevlerim</li>
    </ol>

    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-pie me-1"></i>
                    Ödev Durumu
                </div>
                <div class="card-body">
                    <canvas id="statusChart" width="100%" height="50"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-clock me-1"></i>
                    Yaklaşan Teslim Tarihleri
                </div>
                <div class="card-body">
                    <div id="upcomingDeadlines">
                        @foreach (var assignment in Model.Where(a => a.DueDate > DateTime.Now).OrderBy(a => a.DueDate).Take(5))
                        {
                            <div class="alert @(DateTime.Now.AddDays(1) > assignment.DueDate ? "alert-danger" : "alert-warning")">
                                <strong>@assignment.Title</strong>
                                <br />
                                Teslim Tarihi: @assignment.DueDate.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-tasks me-1"></i>
            Ödev Listesi
        </div>
        <div class="card-body">
            <table id="todoTable" class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Başlık</th>
                        <th>Kategori</th>
                        <th>Teslim Tarihi</th>
                        @if (isTeacher)
                        {
                            <th>Öğrenci</th>
                        }
                        <th>Durum</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var assignment in Model)
                    {
                        <tr class="@(assignment.DueDate < DateTime.Now && assignment.Status != AssignmentStatus.Completed ? "table-danger" : "")">
                            <td>@assignment.Title</td>
                            <td>@assignment.CategoryName</td>
                            <td>@assignment.DueDate.ToString("dd/MM/yyyy HH:mm")</td>
                            @if (isTeacher)
                            {
                                <td>@assignment.AssignedToName</td>
                            }
                            <td>
                                @if (!isTeacher)
                                {
                                    <select class="form-select status-select" data-assignment-id="@assignment.Id">
                                        @foreach (AssignmentStatus status in Enum.GetValues(typeof(AssignmentStatus)))
                                        {
                                            <option value="@((int)status)" selected="@(assignment.Status == status)">
                                                @status
                                            </option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <span class="badge bg-@(assignment.Status == AssignmentStatus.Completed ? "success" : 
                                                          assignment.Status == AssignmentStatus.InProgress ? "primary" :
                                                          assignment.Status == AssignmentStatus.Late ? "danger" : "warning")">
                                        @assignment.Status
                                    </span>
                                }
                            </td>
                            <td>
                                <a asp-controller="Assignment" asp-action="Details" asp-route-id="@assignment.Id" 
                                   class="btn btn-info btn-sm">
                                    <i class="fas fa-eye"></i> Detay
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            $('#todoTable').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/tr.json'
                }
            });

            // Status Chart
            var statusCounts = {
                Pending: @Model.Count(a => a.Status == AssignmentStatus.Pending),
                InProgress: @Model.Count(a => a.Status == AssignmentStatus.InProgress),
                Completed: @Model.Count(a => a.Status == AssignmentStatus.Completed),
                Late: @Model.Count(a => a.Status == AssignmentStatus.Late)
            };

            var ctx = document.getElementById('statusChart');
            var statusChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Bekliyor', 'Devam Ediyor', 'Tamamlandı', 'Gecikmiş'],
                    datasets: [{
                        data: [statusCounts.Pending, statusCounts.InProgress, statusCounts.Completed, statusCounts.Late],
                        backgroundColor: ['#ffc107', '#0d6efd', '#198754', '#dc3545']
                    }]
                },
                options: {
                    responsive: true
                }
            });

            // Status Update
            $('.status-select').change(function () {
                var assignmentId = $(this).data('assignment-id');
                var status = $(this).val();
                
                $.post('/Todo/UpdateStatus', { id: assignmentId, status: status })
                    .done(function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            updateStatusChart();
                        } else {
                            toastr.error(response.message);
                        }
                    })
                    .fail(function () {
                        toastr.error('Bir hata oluştu');
                    });
            });

            function updateStatusChart() {
                $.get('/Todo/GetTodoList')
                    .done(function (data) {
                        var statusCounts = {
                            Pending: data.filter(x => x.status === 'Pending').length,
                            InProgress: data.filter(x => x.status === 'InProgress').length,
                            Completed: data.filter(x => x.status === 'Completed').length,
                            Late: data.filter(x => x.status === 'Late').length
                        };

                        statusChart.data.datasets[0].data = [
                            statusCounts.Pending,
                            statusCounts.InProgress,
                            statusCounts.Completed,
                            statusCounts.Late
                        ];
                        statusChart.update();
                    });
            }
        });
    </script>
}
